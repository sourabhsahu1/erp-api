<?php


namespace Modules\Finance\Repositories;

use Illuminate\Support\Facades\DB;
use Luezoid\Laravelcore\Exceptions\AppException;
use Luezoid\Laravelcore\Repositories\EloquentBaseRepository;
use Modules\Finance\Models\Budget;
use Modules\Finance\Models\BudgetBreakup;

class BudgetRepository extends EloquentBaseRepository
{
    public $model = Budget::class;


    public function create($data)
    {

        $budgets = $data['data']['budget_breakups'];
        unset($data['data']['budget_breakups']);

        if (isset($data['data']['economic_segment_id'])) {
            $budgetCheck = Budget::where('admin_segment_id', $data['data']['admin_segment_id'])
                ->where('fund_segment_id', $data['data']['fund_segment_id'])
                ->where('economic_segment_id', $data['data']['economic_segment_id'])
                ->first();
            if ($budgetCheck) {
                throw new AppException('required budget already exist');
            }
        }

        if (isset($data['data']['program_segment_id'])) {
            $budgetCheck = Budget::where('admin_segment_id', $data['data']['admin_segment_id'])
                ->where('fund_segment_id', $data['data']['fund_segment_id'])
                ->where('program_segment_id', $data['data']['program_segment_id'])
                ->first();
            if ($budgetCheck) {
                throw new AppException('required budget already exist');
            }
        }
        DB::beginTransaction();
        try {
            $budget = parent::create($data);
            foreach ($budgets as $key => $item) {
                $budgets[$key]['budget_id'] = $budget->id;
            }
            BudgetBreakup::insert($budgets);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
        }

        return Budget::with('budget_breakups')->find($budget->id);
    }


    public function getAll($params = [], $query = null)
    {

        $query = Budget::whereNull('economic_segment_id');
        $budgets = parent::getAll($params, $query);

        foreach ($budgets['items'] as $k => &$budget) {

            $budget = $budget->toArray();

            $sumB = 0;
            $sumS = 0;

            for ($i = 1; $i <= 12; $i++) {
                $budget['month' . $i . '_main_budget'] = null;
                $budget['month' . $i . '_supplementary_budget'] = null;
            }

            if (isset($budget['budget_breakups'])) {
                foreach ($budget['budget_breakups'] as $k1 => $item) {
                    $budget['month' . $item['month'] . '_main_budget'] = $item['main_budget'];
                    $budget['month' . $item['month'] . '_supplementary_budget'] = $item['supplementary_budget'];
                    $sumB += $item['main_budget'];
                    $sumS += $item['supplementary_budget'];
                }
            }

            $budget['total_budget'] = $sumB;
            $budget['total_supplementary_budget'] = $sumS;
        }
        return $budgets;
    }


    public function getEconomicBudget($params)
    {

        $query = Budget::whereNull('program_segment_id');
        $budgets = parent::getAll($params, $query);

        foreach ($budgets['items'] as $k => &$budget) {

            $budget = $budget->toArray();

            $sumB = 0;
            $sumS = 0;

            for ($i = 1; $i <= 12; $i++) {
                $budget['month' . $i . '_main_budget'] = null;
                $budget['month' . $i . '_supplementary_budget'] = null;
            }

            if (isset($budget['budget_breakups'])) {
                foreach ($budget['budget_breakups'] as $k1 => $item) {
                    $budget['month' . $item['month'] . '_main_budget'] = $item['main_budget'];
                    $budget['month' . $item['month'] . '_supplementary_budget'] = $item['supplementary_budget'];
                    $sumB += $item['main_budget'];
                    $sumS += $item['supplementary_budget'];
                }
            }

            $budget['total_budget'] = $sumB;
            $budget['total_supplementary_budget'] = $sumS;
        }
        return $budgets;
    }


    public function delete($data)
    {

        BudgetBreakup::where('budget_id', $data['id'])->delete();
        return parent::delete($data); // TODO: Change the autogenerated stub
    }

    public function update($data)
    {

        $budgets = $data['data']['budget_breakups'];
        unset($data['data']['budget_breakups']);

        DB::beginTransaction();
        try {
            $budget = parent::update($data);

            BudgetBreakup::where('budget_id', $data['id'])->delete();

            foreach ($budgets as $key => &$item) {
                unset($item['id']);
                $budgets[$key]['budget_id'] = $budget->id;
            }

            BudgetBreakup::insert($budgets);
            DB::commit();
        } catch (\Exception $e) {
            DB::rollBack();
            throw $e;
        }

        return Budget::with('budget_breakups')->find($data['id']);
    }


}
